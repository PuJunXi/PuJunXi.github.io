<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>P1700 [USACO19OPEN] Milk Factory B Solution</title>
    <link href="/2024/01/23/solution/P1700-%5BUSACO19OPEN%5D-Milk-Factory-B-Solution/"/>
    <url>/2024/01/23/solution/P1700-%5BUSACO19OPEN%5D-Milk-Factory-B-Solution/</url>
    
    <content type="html"><![CDATA[<h1>P1700 [USACO19OPEN] Milk Factory B Solution</h1><p><a href="https://www.luogu.com.cn/problem/P1700">Portal</a></p><h2 id="题意">题意</h2><p>一张有向图，有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 条边，求一个所有点都能到的点，且编号最小，无解输出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>。</p><h2 id="思路">思路</h2><p>由于数据较小（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">1\leq n\leq100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">100</span></span></span></span>），所以可以暴力。</p><p>每个点都能到达，也就是从一个点搜到的所有点的数量是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。</p><p>建立一个桶，存放每个点被搜到的次数。</p><p>如果满足条件则直接输出，因为枚举桶的顺序保证答案最小。</p><h2 id="Code">Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br>std::vector &lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; g;  <span class="hljs-comment">// 邻接表</span><br>std::vector &lt;<span class="hljs-type">int</span>&gt; f;  <span class="hljs-comment">// 桶</span><br><span class="hljs-type">bool</span> vis[<span class="hljs-number">105</span>];  <span class="hljs-comment">// 标记</span><br><span class="hljs-type">int</span> n,u,v;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;  <span class="hljs-comment">// 深搜</span><br>    <span class="hljs-keyword">if</span>(vis[u]) <span class="hljs-keyword">return</span>;<br>    vis[u]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;g[u].<span class="hljs-built_in">size</span>();i++)&#123;<br>        f[g[u][i]]++;  <span class="hljs-comment">// 对应桶加1</span><br>        <span class="hljs-built_in">dfs</span>(g[u][i]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    f.<span class="hljs-built_in">resize</span>(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    g.<span class="hljs-built_in">resize</span>(n+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);<br>        g[u].<span class="hljs-built_in">push_back</span>(v);  <span class="hljs-comment">// 建边</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(vis));  <span class="hljs-comment">// 每搜一遍要清空</span><br>        <span class="hljs-built_in">dfs</span>(i); <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(f[i]==n<span class="hljs-number">-1</span>)&#123;  <span class="hljs-comment">// 满足条件</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,i);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>); <span class="hljs-comment">//  无解</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Solution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UVA11518 Dominos 2 Solution</title>
    <link href="/2024/01/22/solution/UVA11518-Dominos-2-Solution/"/>
    <url>/2024/01/22/solution/UVA11518-Dominos-2-Solution/</url>
    
    <content type="html"><![CDATA[<h1>UVA11518 Dominos 2 Solution</h1><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=27&amp;page=show_problem&amp;problem=2513">Portal(UVa)</a></p><p><a href="https://www.luogu.com.cn/problem/UVA11518">Portal(Luogu)</a></p><h2 id="思路">思路</h2><p>这是一道简单的图问题。</p><p>非常典型，用邻接表建图，从每一个被人工推倒的骨牌处 dfs。</p><p>由于被搜过的骨牌会被打上标记，最后统计标记的个数。</p><p>多测一定要清空。</p><h2 id="Code">Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">bool</span> vis[<span class="hljs-number">10005</span>];<br>vector &lt;<span class="hljs-type">int</span>&gt; g[<span class="hljs-number">10005</span>];<br><span class="hljs-type">int</span> t,n,m,k,u,v,r,ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>    vis[u]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:g[u]) <span class="hljs-keyword">if</span>(!vis[i]) <span class="hljs-built_in">dfs</span>(i);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> vis);<br>        <span class="hljs-built_in">memset</span>(g,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> g);<br>        cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>            cin&gt;&gt;u&gt;&gt;v;<br>            g[u].<span class="hljs-built_in">push_back</span>(v);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)&#123;<br>            cin&gt;&gt;r;<br>            <span class="hljs-built_in">dfs</span>(r);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-keyword">if</span>(vis[i]) ans++;<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Solution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder ABC335D Loong and Takahashi Solution</title>
    <link href="/2024/01/09/solution/AtCoder-ABC335D-Loong-and-Takahashi-Solution/"/>
    <url>/2024/01/09/solution/AtCoder-ABC335D-Loong-and-Takahashi-Solution/</url>
    
    <content type="html"><![CDATA[<h1>AtCoder ABC335D Loong and Takahashi Solution</h1><p><a href="https://atcoder.jp/contests/abc335/tasks/abc335_d">Portal(AT)</a></p><p><a href="https://www.luogu.com.cn/problem/AT_abc335_d">Portal(Luogu)</a></p><p>龙年元素好评！</p><h2 id="Part-1">Part 1</h2><p>赛时看了半天翻译，没看懂（</p><p>但是样例简单明了，就是<a href="https://www.luogu.com.cn/problem/P5731">蛇形方阵</a>加强版（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>45</mn></mrow><annotation encoding="application/x-tex">3 \leq N \leq 45</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">45</span></span></span></span>），矩阵中央变成 <code>T</code>。</p><p>样例如下：</p><blockquote><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">16 </span><span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">15 </span><span class="hljs-number">24</span> T <span class="hljs-number">20</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">14 </span><span class="hljs-number">23</span> <span class="hljs-number">22</span> <span class="hljs-number">21</span> <span class="hljs-number">8</span><br><span class="hljs-symbol">13 </span><span class="hljs-number">12</span> <span class="hljs-number">11</span> <span class="hljs-number">10</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure></blockquote><p>分类，上下左右四种，在草稿纸上画这个矩阵，分别标出每个数的下标，找规律。</p><p>于是就有了如下 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span> 个函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cons1</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123; <span class="hljs-comment">// 上横</span><br>    <span class="hljs-type">int</span> u=l,v=l;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++)&#123;<br>        c[u][v]=d++;<br>        v++;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cons2</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123; <span class="hljs-comment">// 右竖</span><br>    <span class="hljs-type">int</span> u=l,v=r;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++)&#123;<br>        c[u][v]=d++;<br>        u++;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cons3</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123; <span class="hljs-comment">// 下横</span><br>    <span class="hljs-type">int</span> u=l+<span class="hljs-number">1</span>,v=l;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&gt;=r;i--)&#123;<br>        c[u][v]=d++;<br>        v--;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cons4</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123; <span class="hljs-comment">// 左竖</span><br>    <span class="hljs-type">int</span> u=l,v=r<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&gt;=r;i--)&#123;<br>        c[u][v]=d++;<br>        u--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Part-2">Part 2</h2><p>但这 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span> 函数只能构造出一圈，想要打印出完整的矩阵还要找规律。</p><p>再次在草稿纸上画，标出每个函数工作的范围，于是就有了这样的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> o=<span class="hljs-number">1</span>,p=<span class="hljs-number">2</span>,q=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-built_in">cons1</span>(o,n-q);<br>    <span class="hljs-built_in">cons2</span>(p,n-q);<br>    q++;<br>    <span class="hljs-built_in">cons3</span>(n-q,o);<br>    <span class="hljs-built_in">cons4</span>(n-q,p);<br>    o++,p++;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Part-3">Part 3</h2><p>接下来就是打印了。</p><p>矩阵中央的 <code>T</code> 可以特判。</p><p>于是打印代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>        <span class="hljs-keyword">if</span>(i==n/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>&amp;&amp;j==n/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;T &quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,c[i][j]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Part-4">Part 4</h2><p>合并上述代码，得到最终代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-type">int</span> n,d=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> c[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>];<br><span class="hljs-keyword">namespace</span> cons&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cons1</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>        <span class="hljs-type">int</span> u=l,v=l;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++)&#123; <span class="hljs-comment">// 上横</span><br>            c[u][v]=d++;<br>            v++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cons2</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123; <span class="hljs-comment">// 右竖</span><br>        <span class="hljs-type">int</span> u=l,v=r;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++)&#123;<br>            c[u][v]=d++;<br>            u++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cons3</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123; <span class="hljs-comment">// 下横</span><br>        <span class="hljs-type">int</span> u=l+<span class="hljs-number">1</span>,v=l;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&gt;=r;i--)&#123;<br>            c[u][v]=d++;<br>            v--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cons4</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123; <span class="hljs-comment">// 左竖</span><br>        <span class="hljs-type">int</span> u=l,v=r<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&gt;=r;i--)&#123;<br>            c[u][v]=d++;<br>            u--;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> o=<span class="hljs-number">1</span>,p=<span class="hljs-number">2</span>,q=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cons::<span class="hljs-built_in">cons1</span>(o,n-q);<br>        cons::<span class="hljs-built_in">cons2</span>(p,n-q);<br>        q++;<br>        cons::<span class="hljs-built_in">cons3</span>(n-q,o);<br>        cons::<span class="hljs-built_in">cons4</span>(n-q,p);<br>        o++,p++;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(i==n/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>&amp;&amp;j==n/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;T &quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,c[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-built_in">work</span>();<br>    <span class="hljs-built_in">print</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Part-5">Part 5</h2><p>时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，空间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><p><a href="https://atcoder.jp/contests/abc335/submissions/49103079">赛时AC</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Solution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder ABC333C Repunit Trio Solution</title>
    <link href="/2023/12/16/solution/AtCoder-ABC333C-Repunit-Trio-Solution/"/>
    <url>/2023/12/16/solution/AtCoder-ABC333C-Repunit-Trio-Solution/</url>
    
    <content type="html"><![CDATA[<h1>AtCoder ABC333C Repunit Trio Solution</h1><p><a href="https://atcoder.jp/contests/abc333/tasks/abc333_c">Portal(AT)</a></p><p><a href="https://www.luogu.com.cn/problem/AT_abc333_c">Portal(Luogu)</a></p><h2 id="思路">思路</h2><p>我刚看到这题就想到了<strong>搜索</strong>。</p><p>具体如下，搜出所有的<strong>三个 repunits 之和</strong>，输出第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 项，这样就完成了。</p><p>不过需要排序和去重，如果开 <code>bool</code> 数组（桶），观察样例3可知<strong>三个 repunits 之和</strong>最高可达 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>12</mn></msup></mrow><annotation encoding="application/x-tex">10^{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span></span></span></span></span></span></span></span> 左右，不可能开这么大的数组。</p><p>所以经过深思熟虑，我决定。。。</p><p>用 STL！！！</p><h2 id="Code">Code</h2><p>(<s>非常抽象</s>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> n,i,f[<span class="hljs-number">265720</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> x,<span class="hljs-type">long</span> <span class="hljs-type">long</span> y,<span class="hljs-type">long</span> <span class="hljs-type">long</span> z)</span></span>&#123;<br>    <span class="hljs-comment">// 退出条件</span><br><span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">11111111111111</span>||y&gt;<span class="hljs-number">11111111111111</span>||z&gt;<span class="hljs-number">111111111111</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> s=<span class="hljs-number">0</span>;<br>s+=x;s+=y;s+=z;<br>f[i++]=s;<br>    <span class="hljs-comment">// 递归搜索</span><br><span class="hljs-built_in">dfs</span>(x,y,z*<span class="hljs-number">10</span>+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">dfs</span>(x,y*<span class="hljs-number">10</span>+<span class="hljs-number">1</span>,z*<span class="hljs-number">10</span>+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">dfs</span>(x*<span class="hljs-number">10</span>+<span class="hljs-number">1</span>,y*<span class="hljs-number">10</span>+<span class="hljs-number">1</span>,z*<span class="hljs-number">10</span>+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 排序和去重</span><br><span class="hljs-built_in">sort</span>(f,f+<span class="hljs-number">265720</span>);<br><span class="hljs-built_in">unique</span>(f,f+<span class="hljs-number">265720</span>)-f;<br>cout&lt;&lt;f[n<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>王姐，撒花。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Solution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder ABC328D Take ABC Solution</title>
    <link href="/2023/11/12/solution/AtCoder-ABC328D-Take-ABC-Solution/"/>
    <url>/2023/11/12/solution/AtCoder-ABC328D-Take-ABC-Solution/</url>
    
    <content type="html"><![CDATA[<h1>AtCoder ABC328D Take ABC Solution</h1><h2 id="前置芝士">前置芝士</h2><p>栈的运用</p><h2 id="思路">思路</h2><p>这道题给定一个字符串，要求删除符合标准的子串。</p><p>数据达到了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">2 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>，不能用朴素的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Theta(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 算法。</p><p>这不由得想到栈。</p><p>我们只需要不断将字符入栈，一旦满足条件就将其出栈，最后剩下的就是答案了。</p><h2 id="Code"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Code</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span></span></span></span></h2><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-type">int</span> top=<span class="hljs-number">0</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">char</span> st[MAX],s[MAX];<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(s);i++)&#123;<br>st[++top]=s[i];<br><span class="hljs-keyword">if</span>(top&gt;=<span class="hljs-number">3</span>&amp;&amp;st[top]==<span class="hljs-string">&#x27;C&#x27;</span>&amp;&amp;st[top<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;B&#x27;</span>&amp;&amp;st[top<span class="hljs-number">-2</span>]==<span class="hljs-string">&#x27;A&#x27;</span>) top-=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=top;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,st[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">s=<span class="hljs-built_in">input</span>()<br>st=<span class="hljs-built_in">list</span>()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    st.append(i)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(st)&gt;=<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> st[<span class="hljs-built_in">len</span>(st)-<span class="hljs-number">1</span>]==<span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">and</span> st[<span class="hljs-built_in">len</span>(st)-<span class="hljs-number">2</span>]==<span class="hljs-string">&quot;B&quot;</span> <span class="hljs-keyword">and</span> st[<span class="hljs-built_in">len</span>(st)-<span class="hljs-number">3</span>]==<span class="hljs-string">&quot;A&quot;</span>:<br>       st.pop()<br>       st.pop()<br>       st.pop()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> st:<br>    <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Solution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder ABC325C Sensors Solution</title>
    <link href="/2023/10/23/solution/AtCoder-ABC325C-Sensors-Solution/"/>
    <url>/2023/10/23/solution/AtCoder-ABC325C-Sensors-Solution/</url>
    
    <content type="html"><![CDATA[<h1>AtCoder ABC325C Sensors Solution</h1><p>这道题是非常典型的搜索题，而且是联通块。</p><p>我们可以用广度优先搜索来搜联通块，搜完一个传感器就将其置为 <code>.</code>。</p><p>整个题目的思路和 <a href="https://www.luogu.com.cn/problem/P1451">P1451 求细胞数量</a> 完全一样，只需要把数组开到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1000</mn></mrow><annotation encoding="application/x-tex">1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1000</span></span></span></span> 就行。</p><p><a href="https://atcoder.jp/contests/abc325/submissions/46798524">赛时 AC 代码</a></p><p>嫌麻烦的看这里：</p><p>（<s>压了行</s>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-type">int</span> dx[<span class="hljs-number">8</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,<br>dy[<span class="hljs-number">8</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;,ans,n,m;<br><span class="hljs-type">char</span> l[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> q)</span></span>&#123;<br><span class="hljs-type">int</span> x,y,t=<span class="hljs-number">0</span>,w=<span class="hljs-number">1</span>,h[<span class="hljs-number">1005</span>][<span class="hljs-number">3</span>];<br>l[p][q]=<span class="hljs-string">&#x27;.&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)&#123;<br>x=p+dx[i],y=q+dy[i];<br><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>&amp;&amp;x&lt;n&amp;&amp;y&gt;=<span class="hljs-number">0</span>&amp;&amp;y&lt;m&amp;&amp;l[x][y]==<span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-built_in">bfs</span>(x,y);<br>&#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>std::cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++) std::cin&gt;&gt;l[i][j];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++) <span class="hljs-keyword">if</span>(l[i][j]==<span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-built_in">bfs</span>(i,j),ans++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>std::cout&lt;&lt;ans&lt;&lt;std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-built_in">work</span>();<br><span class="hljs-built_in">print</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里将广搜改成了递归的形式，更容易理解，也更好写。</p><p>（<s>其实是我蒻</s>）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Solution</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
